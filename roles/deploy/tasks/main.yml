---
- name: stop running
  shell: bundle exec bluepill --no-privileged {{ project_name }} stop chdir={{ project_prefix }}
  register: _bluepill_stop
  changed_when: _bluepill_stop.stdout.find('Sent stop to')
  ignore_errors: true

- name: wait for stop
  pause: seconds=3
  when: _bluepill_stop|success

- name: remove directory
  file: path={{ project_prefix }} state=absent
  #when: _bluepill_stop|success
  when: false
  tags: clean

#- name: previous revision
#  debug: var="deploy_rev"
#  ignore_errors: true

- name: git clone {{ project_repo }}
  git: repo={{ project_repo }} dest={{ project_prefix }} version=HEAD
  register: _deploy_clone

- name: git revision
  shell: cat .git/refs/heads/master chdir={{ project_prefix }}
  register: _git_rev
  failed_when: _git_rev.stdout == ''
  tags: rev

#- name: store revision
#  set_fact:
#     deploy_rev: "{{ _git_rev.stdout }}"
#  ignore_errors: true
#  when: _git_rev|success

- name: bundle install
  shell: bundle install --deployment --without=development,test --binstubs --clean --retry 2 --path=vendor/bundle chdir={{ project_prefix }}
  register: _bundle_install
  changed_when: _bundle_install.stdout.find('It was installed into')

#- name: bundle check
#  shell: bundle check --no-color chdir={{ project_prefix }}
#  register: _bundle_check

- name: create directories
  file: path={{ project_prefix }}/{{ item }} state=directory
  with_items: "{{ create_dirs }}"

- name: load pill
  shell: bundle exec bluepill --no-privileged load {{ project_pill }} chdir={{ project_prefix }}
  register: _bluepill_load
  changed_when: _bluepill_load.stdout.find('Killing previous bluepilld')

- name: choose the blue one
  shell: bundle exec bluepill --no-privileged {{ project_name }} restart chdir={{ project_prefix }}
  register: _bluepill_restart
  changed_when: _bluepill_restart.stdout.find('Sent restart to')

- pause: seconds=1

# TODO
#- name: check availability
#  uri: url=http://127.0.0.1:9292 return_content=yes
#  register: _deploy_check
#  tags: check
#- action: fail
#  when: "'dcie' not in {{ _deploy_check.content }}"

- flowdock: type=chat
            token="{{ flowdock_token }}"
            external_user_name="{{ flowdock_user_name }}"
            msg="{{ project_name }} [{{ _git_rev.stdout|truncate(7) }}] deployed at {{ ansible_date_time.iso8601 }}"
            tags="{{ project_name }},deploy,{{ ansible_date_time.date }}"
  when: "{{ flowdock_enable }} and _bluepill_restart|success"

